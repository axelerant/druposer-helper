<?php

/**
 * @file
 */

namespace DruposerHelper\Command;

use DruposerHelper\Parser\DrushMake\Parser;
use DruposerHelper\Parser\InfoParser;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Output\StreamOutput;

class InfoComposer extends Command
{

    protected function configure()
    {
        $this
            ->setName("convert:info2composer")
            ->setDescription("Convert info file to composer.json")
            ->addArgument(
              'infofile',
              InputArgument::REQUIRED,
              "Database host"
            )
            ->addOption(
              'make',
              'm',
              InputOption::VALUE_OPTIONAL,
              "Make file"
            )
            ->addOption(
              'out',
              'o',
              InputOption::VALUE_OPTIONAL,
              "Output composer.json file"
            )
            ->addOption(
              'core',
              'c',
              InputOption::VALUE_OPTIONAL,
              "Drupal core version"
            );
    }

    protected function interact(InputInterface $input, OutputInterface $output)
    {
        parent::interact($input, $output); // TODO: Change the autogenerated stub
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $infofilename = $input->getArgument('infofile');
        $makefilename = $input->getOption('make');
        $core = $input->getOption('core');
        if (!$core) {
            $core = '7';
        }

        $file = $input->getOption('out');
        if ($file) {
            $handle = fopen($file, 'w');
            $out = new StreamOutput($handle);
        }
        else {
            $out = $output;
        }

        try {
            $infoparser = new InfoParser($infofilename);
            $dependencies = $infoparser->get('dependencies');

            $projects = [];
            $patches = [];
            if ($makefilename) {
                $parser = new Parser();
                $parser = $parser->getParser($makefilename);
                $projects = $parser->getProjects();
                $patches = $parser->getPatches();
            }

            $composer = [
                'require' => [],
                'extra' => [
                    'patches' => [],
                ],
            ];
            foreach ($dependencies as $dependency) {
                if (empty($projects) || isset($projects[$dependency])) {
                    $version = "*";
                    if (isset($projects[$dependency])) {
                        $version = $projects[$dependency]['version'];
                        $version = str_replace("-dev", "@dev", $version);
                        $version = str_replace(".x", ".0", $version);
                    }
                    $composer['require']['drupal/' . $dependency] = sprintf("~%s.%s", $core, $version);

                    if (isset($patches[$dependency])) {
                        $i = 0;
                        foreach ($patches[$dependency] as $patch) {
                            $key = "Patch " . ++$i;
                            $composer['extra']['patches']['drupal/' . $dependency][$key] = $patch;
                        }
                    }
                }
            }

            $out->write(json_encode($composer, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES) . "\n");
        }
        catch (\Exception $ex) {
            $output->writeln(sprintf("<error>%s</error>", $ex->getMessage()));
            return 1;
        }

        return 0;
    }
}
